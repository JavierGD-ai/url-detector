from flask import Flask, request, jsonify, render_template
import joblib
import re
import random

app = Flask(__name__)

# Cargar modelo aut√≥nomo
model = joblib.load('modelo_autonomo.pkl')
vectorizer = joblib.load('vectorizer_autonomo.pkl')

# Consejos de seguridad din√°micos
consejos = [
    "Los dominios con m√°s de 3 niveles suelen ser sospechosos",
    "Verifica que el TLD (.com, .org) coincida con el sitio real",
    "Las URLs con m√°s de 50 caracteres tienen mayor riesgo",
    "Los sitios leg√≠timos rara vez usan caracteres Unicode",
    "El 92% de los ataques de phishing evitan el uso de HTTPS"
]

def preprocess_url(url):
    """Preprocesamiento id√©ntico al usado en entrenamiento"""
    url = str(url).lower().strip()
    url = re.sub(r'^https?://', '', url)
    url = re.sub(r'www\.', '', url)
    return re.sub(r'[^\w.-]', ' ', url)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predecir', methods=['POST'])
def predecir():
    data = request.get_json()
    url = data.get('url', '').strip()

    if not url:
        return jsonify({'error': 'URL requerida'}), 400

    try:
        # Preprocesamiento consistente
        url_procesada = preprocess_url(url)
        
        # Vectorizaci√≥n
        X = vectorizer.transform([url_procesada])
        
        # Predicci√≥n probabil√≠stica
        prob_segura = model.predict_proba(X)[0][1] * 100
        
        # Clasificaci√≥n con umbrales optimizados
        if prob_segura < 30:
            respuesta = {
                "resultado": "‚ùå URL peligrosa",
                "probabilidad": prob_segura,
                "icono": "red",
                "razon": f"Alto riesgo ({prob_segura:.1f}% de seguridad)"
            }
        elif prob_segura < 65:
            respuesta = {
                "resultado": "‚ö†Ô∏è URL sospechosa", 
                "probabilidad": prob_segura,
                "icono": "orange",
                "razon": f"Riesgo moderado ({prob_segura:.1f}% de seguridad)"
            }
        elif prob_segura < 90:
            respuesta = {
                "resultado": "üü¢ URL aceptable",
                "probabilidad": prob_segura,
                "icono": "blue",
                "razon": f"Bajo riesgo ({prob_segura:.1f}% de seguridad)"
            }
        else:
            respuesta = {
                "resultado": "‚úÖüîí URL segura",
                "probabilidad": prob_segura,
                "icono": "green",
                "razon": f"Segura ({prob_segura:.1f}% de seguridad)"
            }
            
        return jsonify(respuesta)

    except Exception as e:
        return jsonify({
            "error": "Error en el an√°lisis",
            "detalle": str(e),
            "probabilidad": 0
        }), 500

@app.route('/consejo')
def consejo():
    return jsonify({"consejo": random.choice(consejos)})

if __name__ == '__main__':
    app.run(debug=True)